package main

import (
	cli "gopkg.in/urfave/cli.v1"
)

var (
	appFlags = []cli.Flag{
		cli.BoolFlag{
			Name:  "debug",
			Usage: "Enable debug logging",
		},
	}

	serverFlags = []cli.Flag{
		cli.UintFlag{
			Name:   "port",
			Value:  19990,
			EnvVar: "PORT",
		},
		cli.BoolFlag{
			Name:   "no-gateway",
			Usage:  "Disable gateway listener",
			EnvVar: "GATEWAY_DISABLED",
		},
		cli.UintFlag{
			Name:   "gateway-port",
			Value:  19991,
			EnvVar: "GATEWAY_PORT",
		},
		cli.UintFlag{
			Name:   "health-port",
			Value:  19992,
			EnvVar: "HEALTH_PORT",
		},
		cli.UintFlag{
			Name:   "metrics-port",
			Value:  9101,
			EnvVar: "METRICS_PORT",
		},
		cli.StringFlag{
			Name:  "state-store",
			Usage: "storage driver, currently supported [memory]",
			Value: "memory",
		},
		cli.StringFlag{
			Name:   "tls-cert-file",
			Usage:  "File containing the default x509 Certificate for HTTPS. (CA cert, if any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory specified by --cert-dir.",
			EnvVar: "TLS_CERT_FILE",
		},
		cli.StringFlag{
			Name:   "tls-private-key-file",
			Usage:  "File containing the default x509 private key matching --tls-cert-file",
			EnvVar: "TLS_CERT_PRIVATE_KEY_FILE",
		},
		cli.StringFlag{
			Name:   "tls-cert-dir",
			Usage:  "The directory where the TLS certs are located. If --tls-cert-file and --tls-private-key-file are provided, this flag will be ignored",
			EnvVar: "TLS_CERT_DIR",
		},
		cli.StringSliceFlag{
			Name:   "cors-allowed-origins",
			Usage:  "List of allowed origins for CORS, comma separated. An allowed origin can be a regular expression to support subdomain matching. If this list is empty CORS will not be enabled",
			EnvVar: "CORS_ALLOWED_ORGINS",
		},
		cli.BoolFlag{
			Name:  "insecure-tls-skip",
			Usage: "If enabled the listen port would be insecure HTTP instead of default HTTPS",
		},
	}

	traceFlags = []cli.Flag{
		cli.BoolFlag{
			Name:   "trace",
			Usage:  "Enable tracing",
			EnvVar: "TRACE_ENABLED",
		},
		cli.StringFlag{
			Name:   "trace-endpoint",
			Value:  "http://localhost:14268/api/traces",
			Usage:  "Endpoint for the trace service",
			EnvVar: "TRACE_ENDPOINT",
		},
		cli.StringFlag{
			Name:   "trace-namespace",
			Usage:  "Servie namespace",
			Value:  serviceName,
			EnvVar: "TRACE_NAMESPACE",
		},
		cli.StringFlag{
			Name:   "trace-backend",
			Usage:  "Backend to use for the tracing",
			Value:  "jaeger",
			EnvVar: "TRACE_BACKEND",
		},
	}

	serverCommand = cli.Command{
		Name:   "server",
		Usage:  "start server",
		Action: serverAction,
		Flags:  append(serverFlags, traceFlags...),
	}
)
