package main

import (
	"context"
	"fmt"
	"os"

	"runtime"

	"{{  .ModuleName  }}/pkg/log"
	"{{  .ModuleName  }}/pkg/server"
	"{{  .ModuleName  }}/pkg/state"
	"{{  .ModuleName  }}/pkg/state/memory"
	"github.com/pkg/errors"

	cli "gopkg.in/urfave/cli.v1"
)

const (
	//serviceName used in logging, tracing and elsewhere
	serviceName = "{{ .Name  }}"
)

type (
	traceConfig struct {
		enabled   bool
		endpoint  string
		namespace string
		backend   string
	}

	serverConfig struct {
		trace *traceConfig

		debug      bool
		gwEnabled  bool
		port       uint
		gwPort     uint
		hPort      uint
		mPort      uint
		stateStore string
	}
)

var (
	version   = "unknown"
	gitCommit = "unknown"

	errorExitCode = cli.NewExitError("", 1)
)

func isPortValid(port uint) bool {
	return port > 0 && port < 65535
}

func configFromCLI(c *cli.Context) (*serverConfig, error) {

	port := c.Uint("port")
	if !isPortValid(port) {
		return nil, fmt.Errorf("invalid port number: %d", port)
	}

	gwPort := c.Uint("gateway-port")
	if !isPortValid(gwPort) {
		return nil, fmt.Errorf("invalid gateway port number: %d", gwPort)
	}

	if gwPort == port {
		return nil, errors.New("gw-port and port cannot be the same")
	}

	healthPort := c.Uint("health-port")
	if !isPortValid(healthPort) {
		return nil, fmt.Errorf("invalid health-port number: %d", healthPort)
	}

	if healthPort == port {
		return nil, errors.New("health-port and port cannot be the same")
	}

	if healthPort == gwPort {
		return nil, errors.New("health-port and gw-port cannot be the same")
	}

	metricsPort := c.Uint("metrics-port")
	if !isPortValid(metricsPort) {
		return nil, fmt.Errorf("invalid metrics port number: %d", metricsPort)
	}

	if metricsPort == port {
		return nil, errors.New("metrics-port and port cannot be the same")
	}

	if metricsPort == gwPort {
		return nil, errors.New("metrics-port and gw-port cannot be the same")
	}

	if metricsPort == healthPort {
		return nil, errors.New("metrics-port and health-port cannot be the same")
	}

	return &serverConfig{
		trace: &traceConfig{
			enabled:   c.Bool("trace"),
			endpoint:  c.String("trace-endpoint"),
			namespace: c.String("trace-namespace"),
			backend:   c.String("trace-backend"),
		},
		port:       port,
		gwPort:     gwPort,
		hPort:      healthPort,
		mPort:      metricsPort,
		gwEnabled:  !c.Bool("no-gateway"),
		stateStore: c.String("state-store"),
		debug:      c.GlobalBool("debug"),
	}, nil
}

func getStoreInitialized(logger *log.Logger, o *serverConfig) (store state.Store, err error) {

	switch o.stateStore {
	case "memory":
		store, err = memory.NewStore(memory.Logger(logger), memory.Trace(o.trace.enabled))
	default:
		return nil, fmt.Errorf("invalid store: %s", o.stateStore)
	}

	err = store.Initialize(context.Background())
	if err != nil {
		logger.Errorf("unable to initialize store - %v", err)
		return nil, err
	}

	return
}

func serverAction(c *cli.Context) (err error) {

	o, err := configFromCLI(c)
	if err != nil {
		fmt.Printf("Unable to parse / validate cli arguments - %v", err)
		return errorExitCode
	}

	ll := log.InfoLevel
	if o.debug {
		ll = log.DebugLevel
	}

	logger, err := log.New(log.WithName(serviceName), log.WithLevel(ll))
	if err != nil {
		return err
	}

	logger.Info("starting {{ .Name  }} server")

	store, err := getStoreInitialized(logger, o)
	if err != nil {
		logger.Errorf("Unable to create store - %v", err)
		return errorExitCode
	}
	defer store.Close()

	rt, err := server.NewRuntime(
		server.Logger(logger),
		server.Port(o.port), server.HealthPort(o.hPort), server.MetricsPort(o.mPort),
		server.Store(store),
		server.Gateway(o.gwEnabled), server.GatewayPort(o.gwPort),
		server.Trace(o.trace.enabled), server.TraceBackend(o.trace.backend), server.TraceNamespace(o.trace.namespace), server.TraceEP(o.trace.endpoint),
	)
	if err != nil {
		logger.Errorf("unable to create server runtime - %v", err)
		return errorExitCode
	}
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	errc, err := rt.Start(ctx)
	if err != nil {
		return errorExitCode
	}
	err = <-errc // blocking on error channel
	rt.Stop(context.Background())

	return err
}

func main() {
	cli.VersionPrinter = func(c *cli.Context) {
		fmt.Printf("%s\n Version:  %s\n Git Commit:  %s\n Go Version:  %s\n OS/Arch:  %s/%s\n Built:  %s\n",
			serviceName, version, gitCommit, runtime.Version(), runtime.GOOS, runtime.GOARCH, c.App.Compiled)
	}

	app := cli.NewApp()

	app.Name = serviceName
	app.Copyright = "(c) 2019 Copyright"
	app.Usage = "{{ .Name  }} description"

	app.Version = version
	app.Flags = appFlags
	app.Commands = []cli.Command{
		serverCommand,
	}

	app.Run(os.Args)
}
