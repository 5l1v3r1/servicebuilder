package middleware

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

// Used if no interceptors are specified while chaining
func defaultInterceptor(ctx context.Context, req interface{}, _ *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
	return handler(ctx, req)
}

func chainingUnaryInterceptor(interceptors ...grpc.UnaryServerInterceptor) grpc.UnaryServerInterceptor {
	n := len(interceptors)
	switch n {
	case 0:
		return defaultInterceptor
	case 1:
		return interceptors[0]
	default: // n > 1
		return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {

			cur := 0
			var next grpc.UnaryHandler
			next = func(currentCtx context.Context, currentReq interface{}) (interface{}, error) {
				if cur == n-1 {
					return handler(currentCtx, currentReq)
				}
				cur++
				resp, err := interceptors[cur](currentCtx, currentReq, info, next)
				cur--
				return resp, err
			}

			return interceptors[0](ctx, req, info, next)
		}
	}
}

// WithUnaryInterceptors is a wrapper middleware that chains a set of interceptors in the specified order
func WithUnaryInterceptors(interceptors ...grpc.UnaryServerInterceptor) grpc.ServerOption {
	return grpc.UnaryInterceptor(chainingUnaryInterceptor(interceptors...))
}
