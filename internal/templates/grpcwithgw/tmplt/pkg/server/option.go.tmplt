package server

import (
	"{{  .ModuleName  }}/pkg/log"
	"{{  .ModuleName  }}/pkg/state"
)

type (
	// Option configures choices
	Option interface {
		apply(*runtime)
	}
	optionFunc func(*runtime)
)

// Store used by runtime
func Store(store state.Store) Option {
	return optionFunc(func(r *runtime) {
		r.store = store
	})
}

// Logger for runtime
func Logger(l *log.Logger) Option {
	return optionFunc(func(r *runtime) {
		r.logger = l.NamedLogger("rt")
	})
}

// Port of the main grpc server
func Port(port uint) Option {
	return optionFunc(func(r *runtime) {
		r.port = port
	})
}

// GatewayPort for HTTP REST/Json End points
func GatewayPort(port uint) Option {
	return optionFunc(func(r *runtime) {
		r.gwPort = port
	})
}

// HealthPort for health check
func HealthPort(port uint) Option {
	return optionFunc(func(r *runtime) {
		r.hPort = port
	})
}

// MetricsPort of the main grpc server
func MetricsPort(port uint) Option {
	return optionFunc(func(r *runtime) {
		r.mPort = port
	})
}

// Gateway enable/disable gateway
func Gateway(enabled bool) Option {
	return optionFunc(func(r *runtime) {
		r.gwEnabled = enabled
	})
}

// Trace enable/disable
func Trace(enabled bool) Option {
	return optionFunc(func(r *runtime) {
		r.traceEnabled = enabled
	})
}

// TraceEP Trace End point
func TraceEP(ep string) Option {
	return optionFunc(func(r *runtime) {
		r.traceEndpoint = ep
	})
}

// TraceBackend jaeger / zipkin
func TraceBackend(backend string) Option {
	return optionFunc(func(r *runtime) {
		r.traceBackend = backend
	})
}

// TraceNamespace used for isolation/categorization
func TraceNamespace(ns string) Option {
	return optionFunc(func(r *runtime) {
		r.traceNamespace = ns
	})
}
